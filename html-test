<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Prayer Map ‚Äì Connected to XRP Ledger</title>
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <style>
    html, body, #container {
      height: 100%;
      width: 100%;
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      background: #0e1822;
      overflow: hidden;
    }
    #container {
      position: relative;
      height: 100vh;
      width: 100vw;
      /* Change the image URL below to your background image */
      background: url('YOUR_BACKGROUND_IMAGE_URL.jpg') center center / cover no-repeat;
      overflow: hidden;
    }
    #map {
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
    }
    #prayer-form-container {
      position: absolute;
      bottom: 24px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 900;
      background: rgba(255,255,255,0.95);
      border-radius: 18px;
      box-shadow: 0 4px 24px rgba(0,0,0,0.15);
      padding: 20px 28px 16px 28px;
      min-width: 280px;
      max-width: 95vw;
      font-family: 'Segoe UI', Arial, sans-serif;
    }
    @media (max-width: 600px) {
      #prayer-form-container {
        min-width: unset;
        max-width: 99vw;
        padding: 12px 6vw 10px 6vw;
      }
    }
    #prayer-form label {
      font-size: 1.07em;
      color: #384056;
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
    }
    #prayer-form textarea {
      width: 100%;
      min-height: 68px;
      border-radius: 7px;
      padding: 8px 10px;
      border: 1px solid #bdbecb;
      margin-bottom: 12px;
      font-size: 1em;
      resize: vertical;
      background: #f9faff;
      color: #384056;
      font-family: inherit;
    }
    #prayer-form button {
      background: #2461b1;
      color: #fff;
      border: none;
      border-radius: 8px;
      padding: 10px 28px;
      font-size: 1.0em;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 2px 8px 0 rgba(36,97,177,0.17);
      transition: background .18s;
    }
    #prayer-form button:disabled {
      background: #b5c8e6;
      cursor: not-allowed;
    }
    /* Leaflet popups: make them larger and more readable */
    .leaflet-popup-content-wrapper {
      background: #f6f8fc;
      border-radius: 13px;
      box-shadow: 0 2px 16px rgba(63,79,117,0.08);
    }
    .leaflet-popup-content {
      color: #223156;
      font-size: 1.1em;
      font-weight: 500;
      line-height: 1.35;
      padding: 8px 8px 6px 8px;
    }
    /* Hide the Leaflet logo/attribution */
    /* This is also handled in JS, but double-guard with CSS */
    .leaflet-control-attribution,
    .leaflet-control-container .leaflet-control-attribution {
      display: none !important;
      visibility: hidden;
    }
    /* Custom feedback popup styling */
    #popup-feedback {
      position: absolute;
      left: 50%;
      top: 18%;
      z-index: 1100;
      transform: translateX(-50%);
      background: #ffffffdd;
      border-radius: 18px;
      box-shadow: 0 6px 32px rgba(43,77,172,0.30);
      padding: 32px 40px;
      font-size: 1.3em;
      font-weight: 600;
      text-align: center;
      color: #278419;
      animation: popupIn 0.35s cubic-bezier(.4,1.3,.8,1);
      display: none;
    }
    @keyframes popupIn {
      from { opacity: 0; transform: translateX(-50%) scale(.85);}
      to   { opacity: 1; transform: translateX(-50%) scale(1);}
    }
  </style>
</head>
<body>
  <div id="container">
    <div id="map"></div>

    <div id="prayer-form-container">
      <form id="prayer-form" autocomplete="off">
        <label for="prayer-text">Add your prayer to the map (recorded on the XRP Ledger):</label>
        <textarea id="prayer-text" name="prayer-text" maxlength="350" required placeholder="Type your prayer or blessing here (max 350 characters)..."></textarea>
        <button id="submit-prayer" type="submit">Submit Prayer</button>
      </form>
    </div>

    <div id="popup-feedback"></div>
  </div>

  <!-- Prayer Wall (must be before scripts so JS can attach listeners) -->
  <section id="prayer-wall" style="position:absolute;top:20px;left:20px;z-index:999;background:#fff;padding:15px;border-radius:10px;max-width:300px;">
    <h3>üôè Recent Prayers</h3>
    <button id="load-prayers">Load Prayers</button>
    <ul id="prayer-list"></ul>
    <div id="pagination-controls">
      <button id="prev-page" disabled>‚Üê Prev</button>
      <span id="page-info"></span>
      <button id="next-page">Next ‚Üí</button>
    </div>
  </section>

  <!-- Leaflet JS -->
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <!-- xrpl.js for browser -->
  <script src="https://unpkg.com/xrpl/build/xrpl-latest-min.js"></script>

  <script>

/* ================================
   CONFIG
================================ */
const NETWORK = "mainnet";
const collectorAddress = "rED7fJm5i2gJ6ZqF3madgu7rsubnhxdr8x";
const JCS_ISSUER = "rPU6sXCNzsjcTUEmgJQ5SxDUzY2y1RyYKd";
const EXPLORER_TX_BASE = "https://livenet.xrpl.org/transactions/";

/* ================================
   MAP SETUP (same as before)
================================ */
let map;
let lastClickLatLng = null;
document.addEventListener("DOMContentLoaded", function () {
  let defaultCoords = [20.0, 0.0];
  let defaultZoom = 2;

  map = L.map("map", {
    attributionControl: false,
    zoomControl: true,
    minZoom: 2,
    maxZoom: 10,
  }).setView(defaultCoords, defaultZoom);

  const tiles = L.tileLayer(
    'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
    { maxZoom: 19, attribution: '' }
  ).addTo(map);

  tiles.on('tileerror', () => {});

  map.on('click', function (e) {
    lastClickLatLng = e.latlng;
    document.getElementById('prayer-text').focus();
  });
});

/* ================================
   FEEDBACK HELPERS
================================ */
function showFeedbackPopup(message, isError = false) {
  const feedback = document.getElementById('popup-feedback');
  feedback.innerText = message;
  feedback.style.color = isError ? '#db3030' : '#278419';
  feedback.style.display = 'block';
  setTimeout(() => { feedback.style.display = 'none'; }, isError ? 4000 : 2750);
}
function showMapPopup(message, latlng=null) {
  let coord = latlng || lastClickLatLng || [20.0,0.0];
  map.openPopup(message, coord, {autoClose: true, closeOnClick: false});
}

/* ================================
   PREPARE PRAYER TX (unsigned)
================================ */
async function preparePrayerTx(prayerText) {
  const memoData = xrpl.convertStringToHex(prayerText.slice(0,350));
  return {
    TransactionType: "Payment",
    Account: null, // filled by signer
    Destination: collectorAddress,
    Amount: {
      currency: "JCS",
      value: "1",
      issuer: JCS_ISSUER
    },
    Memos: [
      { Memo: { MemoType: xrpl.convertStringToHex("Prayer"), MemoData: memoData } }
    ]
  };
}

/* ================================
   FORM SUBMISSION
================================ */
document.addEventListener('DOMContentLoaded', function () {
  const prayerForm = document.getElementById('prayer-form');
  const prayerTextArea = document.getElementById('prayer-text');
  const submitBtn = document.getElementById('submit-prayer');
  let submitting = false;

  prayerForm.addEventListener('submit', async function (e) {
    e.preventDefault();
    if (submitting) return;
    const text = prayerTextArea.value.trim();
    if (!text) { prayerTextArea.focus(); return; }

    submitting = true;
    submitBtn.disabled = true;
    submitBtn.innerText = "Preparing...";

    try {
      const tx = await preparePrayerTx(text);

      // ‚ö†Ô∏è In production, forward to your backend to create a Xumm payload.
      // For test/demo, just log the tx so you can paste into Xumm Dev Tools.
      console.log("Unsigned Prayer TX:", tx);

      showFeedbackPopup("Prayer prepared. Please sign with your Xaman wallet.");
      prayerTextArea.value = '';
      showMapPopup("üôè Prayer prepared for ledger submission.", lastClickLatLng);

    } catch (err) {
      console.error(err);
      showFeedbackPopup("Error preparing prayer transaction", true);
    } finally {
      submitting = false;
      submitBtn.disabled = false;
      submitBtn.innerText = "Submit Prayer";
    }
  });
});

/* ================================
   PRAYER WALL (reads from collector)
================================ */
let testimonials = [];
let currentPage = 1;
const ITEMS_PER_PAGE = 5;

function renderPrayers() {
  const list = document.getElementById("prayer-list");
  const pageInfo = document.getElementById("page-info");
  const prevBtn = document.getElementById("prev-page");
  const nextBtn = document.getElementById("next-page");
  list.innerHTML = "";

  const start = (currentPage - 1) * ITEMS_PER_PAGE;
  const pageItems = testimonials.slice(start, start + ITEMS_PER_PAGE);

  pageItems.forEach(item => {
    const li = document.createElement("li");
    li.innerHTML = `<p>${item.text}</p>
      <a href="${item.link}" target="_blank">View on Ledger</a>`;
    list.appendChild(li);
  });

  const totalPages = Math.max(1, Math.ceil(testimonials.length / ITEMS_PER_PAGE));
  pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
  prevBtn.disabled = currentPage === 1;
  nextBtn.disabled = currentPage >= totalPages;
}

document.getElementById("prev-page").addEventListener("click", () => {
  if (currentPage > 1) { currentPage--; renderPrayers(); }
});
document.getElementById("next-page").addEventListener("click", () => {
  if ((currentPage * ITEMS_PER_PAGE) < testimonials.length) { currentPage++; renderPrayers(); }
});

/* Load from Ripple Data API */
async function loadPrayersFromLedger() {
  try {
    const url = `https://data.ripple.com/v2/accounts/${collectorAddress}/transactions?type=payment&limit=50`;
    const res = await fetch(url);
    const data = await res.json();
    testimonials = [];

    data.transactions.forEach(entry => {
      const tx = entry.tx;
      if (tx.Memos) {
        tx.Memos.forEach(m => {
          if (m.Memo && m.Memo.MemoType === xrpl.convertStringToHex("Prayer")) {
            const text = xrpl.convertHexToString(m.Memo.MemoData);
            testimonials.push({
              text,
              link: EXPLORER_TX_BASE + tx.hash,
              ledger_index: tx.ledger_index
            });
          }
        });
      }
    });

    testimonials.sort((a,b) => b.ledger_index - a.ledger_index);
    currentPage = 1;
    renderPrayers();
    showFeedbackPopup("Loaded recent prayers.");
  } catch (err) {
    console.error("Prayer load error:", err);
    showFeedbackPopup("Error loading prayers", true);
  }
}

document.getElementById("load-prayers").addEventListener("click", loadPrayersFromLedger);

</script>

</body>
</html>
